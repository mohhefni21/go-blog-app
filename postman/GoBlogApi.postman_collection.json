{
	"info": {
		"_postman_id": "8e77d0e2-4895-4c85-a9c3-16d5cc7669e7",
		"name": "GoBlogApi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21876127"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register Valid Payload",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"fullname\": \"{{fullname}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/register",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should return not return an error\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.environment.set('accessToken', responseJson.data.accessToken)\r",
									"    pm.environment.set('refreshToken', responseJson.data.refreshToken)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/login",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Regenerate access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should return not return an error\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.environment.set('accessToken', responseJson.data.accessToken)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/refresh-token",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/logout",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Onboarding Update Profil",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should return not return an error\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.environment.set('accessToken', responseJson.data.accessToken)\r",
									"    pm.environment.set('refreshToken', responseJson.data.refreshToken)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "mohhefni212000@gmail.com",
									"type": "text"
								},
								{
									"key": "username",
									"value": "akun_spoty_21052000",
									"type": "text"
								},
								{
									"key": "picture",
									"type": "file",
									"src": "postman-cloud:///1ef6d8c8-78d0-45f0-aa5b-c6f877965416"
								},
								{
									"key": "bio",
									"value": "bio saya updated",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/onboarding",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"auth",
								"onboarding"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile Picture",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/profile/68333010-55dd-4655-b216-6b4696f67647_Screenshot (4).png",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"auth",
								"profile",
								"68333010-55dd-4655-b216-6b4696f67647_Screenshot (4).png"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Post",
			"item": [
				{
					"name": "Add Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should return not return an error\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.environment.set('idPost', responseJson.data.idPost)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"7 Open Source Projects You Should Know [Go Edition]\",\r\n    \"excerpt\": \"River: High-Performance Job Processing In addition to its queue management capabilities, golang-river is part of a robust high-performance job processing system for Go and PostgreSQL. Key Benefits Unified Database: River encourages using PostgreSQL for both application data and the job queue. Transactional Enqueueing: Jobs are enqueued transactionally along with other database changes. This ensures: Jobs are guaranteed to be enqueued if their transaction commits.\",\r\n    \"content\": \"River: High-Performance Job Processing In addition to its queue management capabilities, golang-river is part of a robust high-performance job processing system for Go and PostgreSQL. Key Benefits Unified Database: River encourages using PostgreSQL for both application data and the job queue. Transactional Enqueueing: Jobs are enqueued transactionally along with other database changes. This ensures: Jobs are guaranteed to be enqueued if their transaction commits. Jobs are removed if their transaction rolls back. Jobs aren’t visible for work until commit. This transactional approach helps avoid many distributed systems problems. For more details, refer to the documentation on transactional enqueueing. Conclusion golang-river (RiverQueue) provides a robust and easy-to-use solution for managing in-memory queues in Go. Its concurrency support and capacity management features make it suitable for a wide range of applications. By understanding its core functionalities and advanced features, you can effectively integrate golang-river into your projects. Feel free to experiment with the examples provided and explore the library’s documentation for more advanced use cases. Happy coding!\",\r\n    \"status\": \"publish\",\r\n    \"published_at\": \"2024-09-08 11:07:22\",\r\n    \"tags\": [\"golang\", \"aws\", \"gcp\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update cover",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "idPost",
									"value": "{{idPost}}",
									"type": "text"
								},
								{
									"key": "cover",
									"type": "file",
									"src": "/C:/Users/Moh Hefni/Pictures/Screenshots/Screenshot (1).png"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts/cover",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts",
								"cover"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Cover Picture",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts/cover/4ce9750d-f7be-4be3-bc28-1981ac3c3abb_Screenshot (1).png",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts",
								"cover",
								"4ce9750d-f7be-4be3-bc28-1981ac3c3abb_Screenshot (1).png"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Post",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts"
							],
							"query": [
								{
									"key": "cursor",
									"value": "1",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "search",
									"value": "Open",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts/detail/7-open-source-projects-you-should-know-go-edition",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts",
								"detail",
								"7-open-source-projects-you-should-know-go-edition"
							],
							"query": [
								{
									"key": "search",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Post By Username",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts/user/akun_spoty_21052000",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts",
								"user",
								"akun_spoty_21052000"
							],
							"query": [
								{
									"key": "cursor",
									"value": "2",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "10",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Post By User Login",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts/admin/dashboard",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts",
								"admin",
								"dashboard"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Post by Slug",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts/7-open-source-projects-you-should-know-go-edition",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts",
								"7-open-source-projects-you-should-know-go-edition"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update post by id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"7 Open Source Projects You Should Know [Go Edition] update\",\r\n    \"excerpt\": \"River: High-Performance Job Processing In addition to its queue management capabilities, golang-river is part of a robust high-performance job processing system for Go and PostgreSQL. Key Benefits Unified Database: River encourages using PostgreSQL for both application data and the job queue. Transactional Enqueueing: Jobs are enqueued transactionally along with other database changes. This ensures: Jobs are guaranteed to be enqueued if their transaction commits. update\",\r\n    \"content\": \"River: High-Performance Job Processing In addition to its queue management capabilities, golang-river is part of a robust high-performance job processing system for Go and PostgreSQL. Key Benefits Unified Database: River encourages using PostgreSQL for both application data and the job queue. Transactional Enqueueing: Jobs are enqueued transactionally along with other database changes. This ensures: Jobs are guaranteed to be enqueued if their transaction commits. Jobs are removed if their transaction rolls back. Jobs aren’t visible for work until commit. This transactional approach helps avoid many distributed systems problems. For more details, refer to the documentation on transactional enqueueing. Conclusion golang-river (RiverQueue) provides a robust and easy-to-use solution for managing in-memory queues in Go. Its concurrency support and capacity management features make it suitable for a wide range of applications. By understanding its core functionalities and advanced features, you can effectively integrate golang-river into your projects. Feel free to experiment with the examples provided and explore the library’s documentation for more advanced use cases. Happy coding! update\",\r\n    \"status\": \"publish\",\r\n    \"published_at\": \"2024-09-08 11:07:22\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts/2",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Content image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"should return not return an error\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.environment.set('idPost', responseJson.data.idPost)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "upload",
									"type": "file",
									"src": "/C:/Users/Moh Hefni/Pictures/Screenshots/Screenshot (4).png"
								}
							]
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/posts/content-image/5",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"posts",
								"content-image",
								"5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Add Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"should return not return an error\", () => {\r",
									"//     const responseJson = pm.response.json();\r",
									"\r",
									"//     pm.environment.set('idPost', responseJson.data.idPost)\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"post_id\": 2,\r\n    \"content\": \"Ye right\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/comments",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"should return not return an error\", () => {\r",
									"//     const responseJson = pm.response.json();\r",
									"\r",
									"//     pm.environment.set('idPost', responseJson.data.idPost)\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"wow bagus sekali update\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/comments/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"should return not return an error\", () => {\r",
									"//     const responseJson = pm.response.json();\r",
									"\r",
									"//     pm.environment.set('idPost', responseJson.data.idPost)\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/comments/1",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Interaction",
			"item": [
				{
					"name": "Add Like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"should return not return an error\", () => {\r",
									"//     const responseJson = pm.response.json();\r",
									"\r",
									"//     pm.environment.set('idPost', responseJson.data.idPost)\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"post_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/interactions/like",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"interactions",
								"like"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Share",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"should return not return an error\", () => {\r",
									"//     const responseJson = pm.response.json();\r",
									"\r",
									"//     pm.environment.set('idPost', responseJson.data.idPost)\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"post_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/interactions/share",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"interactions",
								"share"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Bookmark",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"should return not return an error\", () => {\r",
									"//     const responseJson = pm.response.json();\r",
									"\r",
									"//     pm.environment.set('idPost', responseJson.data.idPost)\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"post_id\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/interactions/bookmark",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"interactions",
								"bookmark"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Interaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"should return not return an error\", () => {\r",
									"//     const responseJson = pm.response.json();\r",
									"\r",
									"//     pm.environment.set('idPost', responseJson.data.idPost)\r",
									"// })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/interactions/4",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"interactions",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tag",
			"item": [
				{
					"name": "Get Tag",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/tags",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"tags"
							],
							"query": [
								{
									"key": "search",
									"value": "golang",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}